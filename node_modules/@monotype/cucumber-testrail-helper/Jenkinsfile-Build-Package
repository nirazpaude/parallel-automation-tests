#!groovy

def envVars = env.getEnvironment()

def notify(String result, String previousResult) {

    def notificationChannel = "#myfonts-notifications"
    def emailRecipient = "squad.bravo.core@monotype.com"
    def notifySuccess = false

    if (result == "SUCCESS" && previousResult == "FAILURE") {
        // The build is now fixed
        slackSend(channel: notificationChannel,
            color: "good",
            message: ":aw_yeah: *${env.JOB_NAME}* build is now *FIXED!* ${env.BUILD_URL}"
        )
        emailext(subject: "${env.JOB_NAME} build is now Fixed!",
            body: "${env.BUILD_URL}",
            recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']],
            to: emailRecipient
        )

    } else  if (result == "SUCCESS") {
        // The build is OK - We may want to omit this for some jobs
        if (notifySuccess) {
            slackSend(channel: notificationChannel,
                color: "good",
                message: ":aw_yeah: *${env.JOB_NAME}* build #$BUILD_NUMBER *SUCCEDED!* ${env.BUILD_URL}"
            )
        }

    } else {
        // The build failed
        slackSend(channel: notificationChannel,
            color: "danger",
            message: ":facepalmtomy: *${env.JOB_NAME}* build #$BUILD_NUMBER *FAILED!* ${env.BUILD_URL}"
        )
        emailext(subject: "${env.JOB_NAME} build #$BUILD_NUMBER failed!",
            body: "${env.BUILD_URL}\n\n" + '''${BUILD_LOG,maxLines=9999,escapeHtml=false}''',
            attachLog: true,
            recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']],
            to: emailRecipient
        )
    }
}

node ('php7-slave') {

    // Look for NodeJS 8
    env.PATH = "${tool 'node892'}/bin:${env.PATH}"

    try {
        stage('Cleanup') {
            deleteDir()
        }

        stage('Code Checkout') {
            checkout([$class: 'GitSCM',
                branches: [[name: '*/master']],
                gitTool: 'Default',
                userRemoteConfigs: [[credentialsId: 'myfonts-jenkins',
                url: 'https://github.com/Monotype/cucumber-testrail-helper']]]
            )
        }

        stage("Install Dependencies") {
            sh """
            npm install  --only-production --no-color
            """
        }

        stage("Lint") {
            sh """
            npm run lint:all
            """
        }

        stage("Unit Test") {
            // for now...
            // sh """
            // npm test
            // """

            // publishHTML target: [
            //     allowMissing: true,
            //     reportDir: "coverage/lcov-report",
            //     reportFiles: "index.html",
            //     reportName: "Coverage Report"
            // ]
        }

        stage("Upload Package to Artifactory") {
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Artifactory-Credentials-for-Jenkins-User', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh """
                cd ${WORKSPACE}/
                curl -u$USERNAME:$PASSWORD https://artifact.monotype.com/artifactory/api/npm/auth >> ~/.npmrc
                curl -u$USERNAME:$PASSWORD https://artifact.monotype.com/artifactory/api/npm/npm/auth/@monotype >> ~/.npmrc
                cat ~/.npmrc >> .npmrc
                npm publish --registry https://artifact.monotype.com/artifactory/api/npm/npm/
                """
            }
        }

    } catch (e) {
        currentBuild.result = "FAILURE"
        throw e

    } finally {
        result = currentBuild.result ?: "SUCCESS"
        previousResult = currentBuild.previousBuild?.result
        notify(result, previousResult)
    }
}
